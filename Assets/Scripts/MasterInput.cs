//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Scripts/MasterInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MasterInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MasterInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MasterInput"",
    ""maps"": [
        {
            ""name"": ""ShootingMap"",
            ""id"": ""6d24f6b4-54cf-4b04-8a2c-e524af24d049"",
            ""actions"": [
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""729d2a56-6531-4c2f-9fa9-c3c8d7d16c24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look2"",
                    ""type"": ""PassThrough"",
                    ""id"": ""76335caf-2614-4eb2-b944-a714ad3d7111"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""fc35a9b7-566f-47e5-85de-bb8d03b12c24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""0c5a6a8b-fd22-47ee-861e-bcec13d956ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""89afffa7-5439-413d-9d45-3af2fb5cda26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Horn"",
                    ""type"": ""Button"",
                    ""id"": ""cfc14d65-2965-4c80-966a-dd7de91e19f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""61950ce4-f0a0-447a-8771-cf925f54dc79"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rocket"",
                    ""type"": ""Button"",
                    ""id"": ""799f15f9-71ff-40a9-ae87-06aa8a8d378e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bb8c96e2-0429-4ba8-8e5c-c12894d09c95"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""586df5ee-7cf8-4a6e-83f8-91074c1b2ead"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b951283-f785-4455-9337-f299877746b4"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""229e7538-d85d-4a37-88b9-98a9a7803cbb"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d055fe4f-dac7-4d0c-b198-c1a7103e87ed"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=100,y=80)"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb3b446f-a808-4794-acb6-471b965bc54e"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rocket"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54eb0651-f716-4b93-8a5a-ff487f3fc4f6"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(min=0.3)"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3cba57c-77f9-4f56-941d-1e1ec9def938"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55b8902e-2b89-4b69-ba2a-d45f1c1022a9"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58dcf720-a656-44bb-93c9-086ba8a10fe4"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ShootingMap
        m_ShootingMap = asset.FindActionMap("ShootingMap", throwIfNotFound: true);
        m_ShootingMap_Brake = m_ShootingMap.FindAction("Brake", throwIfNotFound: true);
        m_ShootingMap_Look2 = m_ShootingMap.FindAction("Look2", throwIfNotFound: true);
        m_ShootingMap_Aim = m_ShootingMap.FindAction("Aim", throwIfNotFound: true);
        m_ShootingMap_Shoot = m_ShootingMap.FindAction("Shoot", throwIfNotFound: true);
        m_ShootingMap_Pause = m_ShootingMap.FindAction("Pause", throwIfNotFound: true);
        m_ShootingMap_Horn = m_ShootingMap.FindAction("Horn", throwIfNotFound: true);
        m_ShootingMap_Look = m_ShootingMap.FindAction("Look", throwIfNotFound: true);
        m_ShootingMap_Rocket = m_ShootingMap.FindAction("Rocket", throwIfNotFound: true);
        m_ShootingMap_Move = m_ShootingMap.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ShootingMap
    private readonly InputActionMap m_ShootingMap;
    private IShootingMapActions m_ShootingMapActionsCallbackInterface;
    private readonly InputAction m_ShootingMap_Brake;
    private readonly InputAction m_ShootingMap_Look2;
    private readonly InputAction m_ShootingMap_Aim;
    private readonly InputAction m_ShootingMap_Shoot;
    private readonly InputAction m_ShootingMap_Pause;
    private readonly InputAction m_ShootingMap_Horn;
    private readonly InputAction m_ShootingMap_Look;
    private readonly InputAction m_ShootingMap_Rocket;
    private readonly InputAction m_ShootingMap_Move;
    public struct ShootingMapActions
    {
        private @MasterInput m_Wrapper;
        public ShootingMapActions(@MasterInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Brake => m_Wrapper.m_ShootingMap_Brake;
        public InputAction @Look2 => m_Wrapper.m_ShootingMap_Look2;
        public InputAction @Aim => m_Wrapper.m_ShootingMap_Aim;
        public InputAction @Shoot => m_Wrapper.m_ShootingMap_Shoot;
        public InputAction @Pause => m_Wrapper.m_ShootingMap_Pause;
        public InputAction @Horn => m_Wrapper.m_ShootingMap_Horn;
        public InputAction @Look => m_Wrapper.m_ShootingMap_Look;
        public InputAction @Rocket => m_Wrapper.m_ShootingMap_Rocket;
        public InputAction @Move => m_Wrapper.m_ShootingMap_Move;
        public InputActionMap Get() { return m_Wrapper.m_ShootingMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShootingMapActions set) { return set.Get(); }
        public void SetCallbacks(IShootingMapActions instance)
        {
            if (m_Wrapper.m_ShootingMapActionsCallbackInterface != null)
            {
                @Brake.started -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnBrake;
                @Brake.performed -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnBrake;
                @Brake.canceled -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnBrake;
                @Look2.started -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnLook2;
                @Look2.performed -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnLook2;
                @Look2.canceled -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnLook2;
                @Aim.started -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnAim;
                @Shoot.started -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnShoot;
                @Pause.started -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnPause;
                @Horn.started -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnHorn;
                @Horn.performed -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnHorn;
                @Horn.canceled -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnHorn;
                @Look.started -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnLook;
                @Rocket.started -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnRocket;
                @Rocket.performed -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnRocket;
                @Rocket.canceled -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnRocket;
                @Move.started -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_ShootingMapActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_ShootingMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Brake.started += instance.OnBrake;
                @Brake.performed += instance.OnBrake;
                @Brake.canceled += instance.OnBrake;
                @Look2.started += instance.OnLook2;
                @Look2.performed += instance.OnLook2;
                @Look2.canceled += instance.OnLook2;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Horn.started += instance.OnHorn;
                @Horn.performed += instance.OnHorn;
                @Horn.canceled += instance.OnHorn;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Rocket.started += instance.OnRocket;
                @Rocket.performed += instance.OnRocket;
                @Rocket.canceled += instance.OnRocket;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public ShootingMapActions @ShootingMap => new ShootingMapActions(this);
    public interface IShootingMapActions
    {
        void OnBrake(InputAction.CallbackContext context);
        void OnLook2(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnHorn(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnRocket(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
